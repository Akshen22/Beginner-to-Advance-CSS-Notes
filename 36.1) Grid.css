1) Overview:
CSS Grid allows us to control the layout of a page by dividing it into rows and columns. 
This makes designing complex and large responsive layouts, simple and easy.

HTML:
<div class="container">
  <div>1</div>
  <div>2</div>
  <div>3</div>
  <div>4</div>
  <div>5</div>
  <div>6</div>
</div>

CSS:
/*CSS related to the topic*/
.container {
  display: grid;
  grid-template-columns: 100px auto 100px;
  grid-template-rows: 50px 100px;
  grid-gap: 3px;
}
/*Additional CSS for styling*/
.container > div:nth-child(1n) {
  background-color: #5bc292;
}
.container > div:nth-child(2n) {
  background-color: #f26561;
}
.container > div {
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 24px;
  color: #00000;
}

/*In the above example we applied, display: grid property to the container, 
and used grid-template-columns and grid-template-rows to define the number and size of the items in the rows and columns.*/

/*Changing the value of grid-template-columns and grid-template-rows, we can change the whole layout of the page by controlling rows and columns.*/

2) Grid Container:
A grid container is created by setting display property to grid, a grid container consists of rows and columns. 
Some common terms are good to know while working with grid, like: Grid Cell (box), Grid Lines (line of boxes), and Grid Tracks (2 lines of boxes).

Example:
CSS:
.container {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr; /*fr: fraction*/
  grid-template-rows: 100px 100px;
  width: 50%;
  border: 2px solid red;
}
.container > div {
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 24px;
  color: #00000;
  border: 0.5px solid black;
}

3) 
