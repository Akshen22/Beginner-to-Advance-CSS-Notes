1) Overview:
CSS Grid allows us to control the layout of a page by dividing it into rows and columns. 
This makes designing complex and large responsive layouts, simple and easy.

HTML:
<div class="container">
  <div>1</div>
  <div>2</div>
  <div>3</div>
  <div>4</div>
  <div>5</div>
  <div>6</div>
</div>

CSS:
/*CSS related to the topic*/
.container {
  display: grid;
  grid-template-columns: 100px auto 100px;
  grid-template-rows: 50px 100px;
  grid-gap: 3px;
}
/*Additional CSS for styling*/
.container > div:nth-child(1n) {
  background-color: #5bc292;
}
.container > div:nth-child(2n) {
  background-color: #f26561;
}
.container > div {
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 24px;
  color: #00000;
}

/*In the above example we applied, display: grid property to the container, 
and used grid-template-columns and grid-template-rows to define the number and size of the items in the rows and columns.*/

/*Changing the value of grid-template-columns and grid-template-rows, we can change the whole layout of the page by controlling rows and columns.*/

2) Grid Container:
A grid container is created by setting display property to grid, a grid container consists of rows and columns. 
Some common terms are good to know while working with grid, like: Grid Cell (box), Grid Lines (line of boxes), and Grid Tracks (2 adjacent lines of boxes, either grid-rows or grid-columns).

Example:
CSS:
.container {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr; /*fr: fraction*/
  grid-template-rows: 100px 100px;
  width: 50%;
  border: 2px solid red;
}
.container > div {
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 24px;
  color: #00000;
  border: 0.5px solid black;
}

3) Grid Lines:
Grid lines can be seen on either side of a row or column and can be either vertical called "column grid lines" or horizontal called "row grid lines".

.container {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows: 100px 100px;
}
.container > div {
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 24px;
  color: #00000;
  border: 1px solid red; /*border lines: red*/
}

4) Grid Tracks:
Grid track is the space between two adjacent grid lines, i.e. grid's columns or rows. The grid track between the first and second rows of grid lines is seen here.

HTML:
<div class="container">
  <div class="item1">1</div>
  <div>2</div>
  <div>3</div>
  <div>4</div>
</div>

CSS: 
.container {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows: 100px 100px;
}
.item1 {
  grid-column: 1 / -1; 
  /*1 indicates the starting column (the first column).
  -1 indicates the ending column (counts from the last column).*/
}
.container > div:nth-child(1) {
  background-color: #5bc292;
}
.container > div {
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 24px;
  color: #00000;
  border: 1px solid red;
}

5) Grid Row and Grid Column: The grid-row and grid-column property sets a grid item's position and size.

a) grid-row and grid-column are shorthand for the following properties:
grid-row: grid-row-start / grid-row-end;
grid-column: grid-column-start / grid-column-end;

b) grid-row-start and grid-column-start specify the row/column grid line of the grid layout from where the grid item starts.
And grid-row-end and grid-column-end specify the row/column grid line where the grid item ends.

c) Type 1:

.item1 {
  grid-column: 1 / 3;
  grid-row: 1 / 3;
}
/*1/3: 1st till 3rd line!*/

d) Type 2:

.item1 {
  grid-column: 1 / -3;
  grid-row: 1 / -3;
}
/*1/-3: 1st till last line!*/

e) Type 3:

.item1 {
  grid-column: 1 / span 1;
  grid-row: 1 / span 2;
}

/*1/ span 3: extends from 1st till 3rd line!*/

f) Type 4:
.item1 {
  grid-column: 1;
  grid-row: 2;
}

/*grid-row-end and grid-column-end values are optional if we want to change the position only and not the size of the grid item.
A type of matrix*/

6) Grid Cell:
Grid cell is similar to cells in a spreadsheet, it is the smallest unit of space you can have on your CSS grid layout.

.container {
  display: grid;
  grid-template-columns: 100px 100px 100px;
  grid-auto-rows: 100px;
}
/*Additional CSS for styling*/
.item1 {
  background-color: #5bc292; /*cell 1 turning to green*/
}
.container > div {
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 24px;
  color: #00000;
  border: 1px solid #5bc292;
}

7) Grid Item:
HTML:
<div class="container">
  <div class="item1">1</div>
  <div class="item2">2</div>
  <div class="item3">3</div>
</div>

CSS:
.container {
  display: grid;
}

}

In the above code we could see the div with the container class is parent to the div with the class of item1, item2 and item3. 
Now when we apply display: grid property to the parent div, then it becomes the grid container and the child items are called grid item.

So, basically a grid item is the child or direct descendants of a grid container.
