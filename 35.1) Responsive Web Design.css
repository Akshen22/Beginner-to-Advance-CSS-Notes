1) Overview:
Often, using `display: flex` or `display: inline-block` presents challenges in responsiveness. 
Specifically, when the webpage is viewed at full width, elements display correctly in rows. 
However, upon minimizing the browser window, the layout can shift into long rows, making it difficult to read. 
To improve readability, we could implement a responsive design where elements switch to a column layout when the window is resized. 
This approach ensures a clear, one-by-one presentation in narrower views while maintaining a row-based layout in full-screen mode.

syntax: 
@media screen and (max-width: 630px) {
  ...
}

/*media type: screen, all, print, speech
media feature: max-width, min-width
combine 2 or more media features: and, or, not*/

Example 1:  
HTML:
<section>
  <div class="col">
    <h2>Solar System</h2>
    <p>
      The Solar System is the gravitationally bound system of the Sun and the objects that orbit it, either directly or indirectly.
    </p>
  </div>
  <div class="col">
    <h2>The Sun</h2>
    <p>
      The Sun is the star at the center of the Solar System. It is a nearly perfect sphere of hot plasma, heated to incandescence by nuclear fusion reactions in its core.
    </p>
  </div>
  <div class="col">
    <h2>Earth</h2>
    <p>
      Earth is the third planet from the Sun and the only astronomical object known to harbor and support life. About 29.2% of Earth's surface is land consisting of continents and islands.
    </p>
  </div>
</section>

  CSS:
  section {
  display: flex;
}
.col {
  margin: 10px;
  padding: 5px 15px;
  background-color: #F1F5F9;
}
@media screen and (max-width: 630px) {
  section {
    flex-direction: column;
  }
}

2)   Example 2:
HTML:
<div>
</div>

CSS:
div { 
  height: 200px;
  background-color: green;
}
@media screen and (max-width: 600px) {
  div {
    background-color: orange;
  }
}
/*larger screen: green, smaller screen: orange*/

3) Example 3:
HTML:
<div>
</div>

CSS:
div {
  height: 200px;
  background-color: green;
}
@media screen and (min-width: 401px) and (max-width: 800px) {
  div {
    background-color: orange;
  }
}
@media screen and (max-width: 400px) {
  div {
    background-color: red;
  }
}
/*if it's smaller than 400px then only it gonna show red, else orange*/

4) Breakpoints:
Adding media twice, as per requirement!

Example:
CSS:
section {
  display: flex;
  flex-wrap: wrap;
}
#col1 {
  flex: 2;
}

#col2, #col3 {
  flex: 1;
}

.col {
  margin: 10px;
  padding: 5px 15px;
  background-color: #F1F5F9;
}
ul {
  margin-left: -25px;
}

--> First, will add @media to col1 and still as there's width screen issue in col2 & col3 will add @media the second time!

Final CSS Code:
section {
  display: flex;
  flex-wrap: wrap;
}
#col1 {
  flex: 2;
}

@media screen and (max-width: 860px) {
  #col1 {
    flex: 100%;
  }
}

#col2, #col3 {
  flex: 1;
}

@media screen and (max-width:420px) {
  #col2, #col3 {
    flex: 100%;
  }
}

.col {
  margin: 10px;
  padding: 5px 15px;
  background-color: #F1F5F9;
}
ul {
  margin-left: -25px;
}

5) Mobile first and Desktop first Approaches:
i) set the output panel with a smaller width and later increasing!
ii) first variable (say, col1:) making it flex: 100%
iii) later moving on set the rest variables (say, col2 & col3), making it: flex: 1;
iv) then, in the end, attach one more media, denoting col1 value of flex:2;

@media screen and (min-width: 420px) {
  section {
    display: flex;
    flex-wrap: wrap;
  }
  #col1 {
    flex: 100%;
  }
  #col2, #col3 {
    flex: 1;
  }
}

@media screen and (min-width: 860px) {
  #col1 {
    flex: 2;
  }
}

Problem:
Using the mobile first approach, set the width of this div to 50% for screens wider than 600px 
and 33% for screens wider than 900px!

Ans.)
HTML:
<div>
</div>

CSS:
div {
  height: 200px;
  border: 2px solid purple;
}

@media screen and (min-width: 600px) {
  div{
    width: 50%;
  }
}

@media screen and (min-width: 900px) {
  div {
    width: 33%;
  }
}
