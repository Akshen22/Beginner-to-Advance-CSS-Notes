1) Position:
By default, all the HTML elements appear on the web page one after another in the same order as specified in the HTML markup. 
We can change this with the help of the CSS position property.
Types:
Relative | Absolute | Fixed | Sticky | Static

HTML:
<div class=container>
  <div class="box" id='box1'>1</div>
  <div class="box" id='box2'>2</div>
  <div class="box" id='box3'>3</div>
  <div class="box" id='box4'>4</div>
</div>

CSS:
.container {
  margin: 0px;
  border: 2px solid lightgrey;
  background-color: khaki;
  height: 4000px;
}

.box {
  display: inline-block;
  border: 2px solid blue;
  width: 100px;
  height: 100px;
  margin: 5px;
}

#box4 {
  position: relative;
  top: 34px;
  right: 35px;
}
/*Relative moves from its original place according to the given value*/

#box3 {
  position: absolute;
  top: 34px;
  left: 35px;
}
/*Whereas, Absolute moves from its distance between parents place*/

#box2 {
  position: fixed;
  top: 400px;
  left: 350px;
}
/*Fixed changes its place as said but gonna stay there forever won't move when scrolled*/

#box1 {
  position: sticky;
  left: 400px;
  bottom: 3000px; 
}
/*a) Sticky toggles between relative and fixed
b) The .sticky element initially behaves like a relative element and moves with the flow of the document.
c) When you scroll past it, it sticks to the top of its container (or viewport if no container is defined) and remains there until the parent container is out of view.*/

/*There's 5th: Static, who just shifted as asked by users!*/

2) Positive Offset:
top: 200px

3) Negative Offset:
top:-100px

4) Difference between offsets and margins:
The top and left properties work similarly to the margin-top and the margin-left properties. 
But there is a big difference between them.
Let's look at an example. When you set the top property of a relative element to 50px, only that element is shifted by 50px from the top. 
But if you set the margin-top property to 50px, all the elements below this particular element are also shifted down by 50px.

5) Z-index: (doesn't work with static)
Sometimes, we want to overlap one element over another. We can achieve this with position:relative, but which element appears in front or at the back can be difficult to manage.
The element with a lower z-index value goes behind the one with a higher z-index:

CSS:
div {
  width: 80px;
  height: 80px;
  position: relative;
}
#one {
  background-color: indigo;
  z-index: 4;
}
#two {
  background-color: orange;
  bottom: 50px;
  left: 30px;
  z-index: -1;
}
#three {
  background-color: teal;
  bottom: 100px;
  left: 60px;
  z-index: 4;
}
