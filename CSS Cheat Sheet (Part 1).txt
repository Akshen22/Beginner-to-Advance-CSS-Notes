*CSS: Cheat Sheet Part 1: Introduction of CSS to Text Formatting


*HTML:

1) <div class= book sport>Human</div>

2) <div class=book id=maths>Study</div>

3) <div>
     <h1>What is Universe?</h1>
       <p>
         The universe is all of space and time and their contents.
       </p>
   </div>


*CSS:

a) Properties:

i) * {}

ii) .heading {}

iii) #card {}

iv) div {
  background-color: peachpuff;
}
/*No need to give color to h1, p in 2 ways, as using div we can give it at once!*/
[based on "HTML: point 3)"]


b) Values:

1) Color:
140 colors details that are supported:
https://www.w3docs.com/learn-css/css-color-names.html

i) Basic:
background-color: blue;
color: white;

ii) RGB Color (Red Green Blue):
background-color: rgb(255, 165, 0);
color: rgb(128, 128, 128);

iii) Hex Color (Hexadecimal number range):
background-color: #808080;
color: #ffa500;

iv) HSL color (Hue Saturation Lightness):
background-color: hsl(255, 65%, 20%);
color: hsl(128, 28%, 28%);


2) Dimensions & Units:

a) Dimensions:
i) height
ii) width

b) Units:
i) absolute units: fixed, independent! 
type: 
1) px: used for specifying exact sizes and dimensions on a display. Each pixel corresponds to a single dot on the screen, maintaining the same physical size regardless of screen resolution or surrounding elements.

ii) relative units: depends on size of other elements, can be used when we want the size of the children elements to be dependent on the size of their parent elements! 
types: 
2) %: relative to the parent element's width, height or font-size.
3) em: calculated based on the font size of the element.
4) rem: dependent on root: <html> </html>.
5) vh: 1vh is 1% of the window height; So, 100vh is equivalent to the window height.
6) vw: 1vw is 1% of the window width; So, 100vw is equivalent to the window width.

Examples:
i) height syntax:
a) height: 100px;
b) height: 50%;
c) height: 10em; (10em = 10*font-size-of-parent = 10*9px = 90px, default font-size: 16px)
d) height: 10rem; (calculation similar to em)
e) height: 45vh;

ii) width syntax;
a) width: 80px;
b) width: 40%;
c) width: 10em; (10em = 10*font-size-of-parent = 10*8px = 80px, default font-size: 16px)
d) width: 10rem; (calculation similar to em)
e) width: 54vw;


3) Outline:
The outline property in CSS is used to draw a line around an HTML element. We can style the outline by specifying its line style, colour, and width.
The outline is drawn outside the element's border, thereby not affecting the total width and height of the element.

syntax:
outline: 4px dashed tomato;


4) Restricting Height and Width:

a) Max Height (`max-height`):
i) Restricts the maximum height of an element.
ii) No effect if content height is less than `max-height`.
iii) If content exceeds `max-height`, it overflows and height is limited to `max-height`.

b) Max Width (`max-width`):
i) Restricts the maximum width of an element.
ii) No effect if element's width is less than `max-width`.
iii) If `max-width` is smaller than `width`, the element's width is limited to `max-width`.

c) Min Height (`min-height`):
i) Ensures an element's height does not shrink below a certain value.
ii) No effect if content height is greater than `min-height`.
iii) If content is smaller than `min-height`, the element's height is set to `min-height`.

d) Min Width (`min-width`):
i) Ensures an element's width does not shrink below a certain value.
ii) No effect if element's width is greater than `min-width`.
iii) If `min-width` is larger than `width`, the element's width is set to `min-width`.


5) Margin:(gives that much space, spacing around the element)

a) Basic syntax:
i) margin: 10px; ii) margin: 10%, iii) margin: 20em, iv) margin: 35rem, v) margin: 30vh, vi) margin: 30vw

b) Can separately set margin properties for each side of an element:
i) margin-top, ii) margin-bottom, iii) margin-left, iv) margin-right.

c) Shorthand property:
i) margin: 10px 20px 30px 40px;
--> top, right, bottom, left (clockwise direction)
ii) margin: 10px 20px 30px;
--> top, right & left, bottom
iii) margin: 10px 20px;
--> top & bottom, right & left
iv) margin: 10px
--> all 4 sides!

d) Negative margin: reduces the spacing around elements!
example: margin-top: -2em;
 
e) Auto margin: horizontally centers an element
i) margin: 10px  auto 20px; (left & right are automatically adjusted)
ii) margin-left: auto;
iii) margin-right: auto;
iv) for width: need to fix width then write: margin: auto;
v) vertical margins of adjacent elements collapse into one. To add space above, use padding instead of margin!

6) Padding: (takes that much place)
Controlling the space between the content in the element and its boundaries, vertically (straight line)!

a) Basic syntax:
i) padding: 10px; ii) padding: 10%, iii) padding: 20em, iv) padding: 35rem, v) padding: 30vh, vi) padding: 30vw

b) Can separately set padding properties for each side of an element like margin, using: padding-top, padding-bottom, padding-left and padding-right.

c) Shorthand property:(similar to margin, kindly refer Margin's Shorthand property!)


7) Text Formatting:

a) color:
We can set the color of the text in any element on the web page using its color property.
The values can be color names, HEX values, or RGB values. (kindly refer, "color" para!)

b) text-alignment: Can place our text, the way we want!
--> text-align: center, text-align: justify, text-align: right, text-align: left

c) text-decoration: Can underline text, strike through it or remove an underline using the text-decoration property.
i) line: 
text-decoration: none, text-decoration: underline, text-decoration: overline, text-decoration: line-through

ii) style: solid, double, dotted, dashed, wavy
to implement this; select & write a line type first & later it's style!

iii) color: color names, HEX values, or RGB values
to implement this; select & write a line type, style type first & later it's color!

iv) Shorthand Property: Combines line, style, and color in a single declaration.
text-decoration: underline dotted red;

v) Create space between words and underline:
syntax: text-underline-offset: 2.5px;

d) line-height: (leaves space between 2 lines)
i) If you set line-height to a number like 1.5, it means the space between lines will be 1.5 times the size of the text.

ii) Can also use units like px, em, %, or the word normal (uses the default spacing set by the browser)

iii) syntax: line-height: 1.5

e) letter-spacing: control the spacing between letters of the text (similar to line-height)
A positive value increases the space between the letters in a word, while a negative value decreases it.
i) +ve: letter-spacing: -3px;

ii) -ve: letter-spacing: 0.2em;


f) font-size: modify the size of any text!
syntax: font-size: 18px; font-size: 200%; font-size: 20em; font-size: 30rem; font-size: 29vh; font-size: 35vw; font-size: small; font-size: medium; font-size: large


g) font-weight: used to make the text bolder or lighter!
i) keyword: font-weight: normal, font-weight: bold, font-weight: bolder, font-weight: lighter

ii) numeric: The range typically goes from 100 (thin) to 900 (extra bold)
(note: 400: normal, 700: bold)


h) font-family: serif is by default! The other generic font families are sans-serif, monospace, cursive, and fantasy.
syntax: font-family: serif;


i) commonly & most safe used fonts other than generic:
a) serif: Times New Roman, Georgia, Garamond, Palatino, Book Antiqua
b) sans-serif: Arial, Helvetica, Verdana, Tahoma, Trebuchet MS
c) monospace: Courier New, Courier, Lucida Console, Monaco, Consolas
d) cursive: Comic Sans MS, Brush Script MT
e) fantasy: Impact, Papyrus, Georgia
f) others: Roboto, Open Sans, Lato, Montserrat, Oswald ,Lora, Raleway, Poppins, Proxima Nova,Source Sans Pro, Fira Sans, Museo Sans

syntax: font-family: 'Roboto', 'Arial', sans-serif;
--> if by chance, Roboto falls back, will use Arial a part of sans-serif!



