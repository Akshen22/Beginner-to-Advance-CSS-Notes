8) Grid Template Columns & Rows:
The number and widths of columns in a grid layout are specified by the grid-template-columns property.
Each value in the values list, which is separated by spaces, indicates the size of the corresponding column.

For example, the below code will generate 4 columns of 100px each, can also use 'auto'!
CSS:
.container {
  display: grid;
  grid-template-columns: 100px 100px 100px 100px;
}
Similarly, with rows!

9) Grid Template Areas:
The grid-template-areas attribute can be used to specify a grid layout's areas by using the grid-area property.
The grid-area property gives each grid item a name, which can referenced in the grid-template-areas property.
Apostrophes indicate each area's boundaries. And we can keep empty space by using the period symbol.

syntax:
.container {
  display: grid;
  grid-template-areas:
    ". h h h h h h h h h h h"
    "m c c c c c c c c c c c"
    ". f f f f f f f f f f f";
}
.header {
  grid-area: h;
}
.menu {
  grid-area: m;
}
.content {
  grid-area: c;
}
.footer {
  grid-area: f;
}

Example:
HTML:
<div class="container">
  <div class="header">HEADER</div>
  <div class="menu">MENU</div>
  <div class="content">CONTENT</div>
  <div class="footer">FOOTER</div>
</div>

CSS:
/*CSS related to the topic*/
.container {
  display: grid;
  grid-gap: 5px;
  grid-template-columns: repeat(12, 1fr);
  grid-template-rows: 60px 240px 60px;
  grid-template-areas:
    ". h h h h h h h h h h h"
    "m c c c c c c c c c c c"
    ". f f f f f f f f f f f";
}
.header {
  grid-area: h;
  display: flex;
  justify-content: center;
  align-items: center;
}
.menu {
  grid-area: m;
}
.content {
  grid-area: c;
}
.footer {
  grid-area: f;
}
/*Additional CSS for styling*/
.container > div {
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 24px;
  color: #fae8a1;
}
body {
  background-color: #f6e59e;
  padding: 10px;
  margin: 0px;
}
.container > div:nth-child(1n) {
  background-color: #92d2b4;
}
.container > div:nth-child(3n) {
  background-color: #7ecfa7;
}
.container > div:nth-child(2n) {
  background-color: #f26561;
}
.container > div:nth-child(4n) {
  background-color: #f7c558;
}

10) Grid Template:
grid-template is a shorthand property to set grid-template-rows, and grid-template-columns in a single declaration.

syntax:
a) grid-template: grid-template-rows / grid-template-columns;
b) grid-template: 100px 100px 100px / 100px auto 200px;

equivalent too:
grid-template-rows: 100px 100px 100px;
grid-template-columns: 100px auto 200px;
grid-template-areas: none;

Example:
HTML:
<div class="container">
  <div>1</div>
  <div>2</div>
  <div>3</div>
  <div>4</div>
  <div>5</div>
  <div>6</div>
  <div>7</div>
  <div>8</div>
  <div>9</div>
</div>

CSS:
/*CSS related to the topic*/
.container {
  display: grid;
  grid-gap: 5px;
  grid-template: 100px 100px 100px / 100px auto 200px;
}
/*Additional CSS for styling*/
.container > div {
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 24px;
  color: #000000;
}
body {
  background-color: #f6e59e;
  padding: 10px;
  margin: 0px;
}
.container > div:nth-child(1n) {
  background-color: #92d2b4;
}
.container > div:nth-child(2n) {
  background-color: #f26561;
}

11) Grid Gap:
specifies the width of the space between rows and columns in a grid layout
