1) Setting the display property of the section element to flex, the child elements automatically get placed next to each other.
You can see that the heights of all the 3 blocks are the same. The widths of these blocks are proportional to the content within.
Try adding another sentence to the first div and see how the width changes. 
These blocks have flexible dimensions which is where the name of this property flexbox comes from.

HTML:
<section>
  <div class="col">
    <h2>Solar System</h2>
    <p>
      The Solar System is the gravitationally bound system of the Sun and the objects that orbit it, either directly or indirectly.
    </p>
  </div>
  <div class="col">
    <h2>The Sun</h2>
    <p>
      The Sun is the star at the center of the Solar System. It is a nearly perfect sphere of hot plasma, heated to incandescence by nuclear fusion reactions in its core.
    </p>
  </div>
  <div class="col">
    <h2>Earth</h2>
    <p>
      Earth is the third planet from the Sun and the only astronomical object known to harbor and support life. About 29.2% of Earth's surface is land consisting of continents and islands.
    </p>
  </div>
</section>

CSS:
section {
  display: flex;
}
.col {
  margin: 10px;
  padding: 5px 15px;
  background-color: #F1F5F9;
}

2) Flex Direction:

Types: Row | Row-Reverse | Column | Column-Reverse

By default, the elements within a flex container are stacked next to each other in a single row. The stacking happens from left to right. We can change this with the flex-direction property on the container element.
You can use these values - row, row-reverse, column, and column-reverse for the flex-direction property:

CSS:
.container {
  display: flex;
  padding: 10px;
  background-color: beige;
}
.container > div {
  background-color: orange;
  padding: 10px;
  margin: 5px;
}
.row {
  flex-direction: row;
}
.row-rev {
  flex-direction: row-reverse;
}
.col {
  flex-direction: column;
  min-height:200px;
}
.col-rev {
  flex-direction: column-reverse;
  min-height:200px;
}

3) Flex Wrap:
By default, flexbox tries to fit all the child elements in a row or column depending on the flex direction.
So, if the flex items' width exceeds the parent element's width, we will see a horizontal scrollbar.
To avoid this, we can choose to wrap the elements by pushing them to the next row/column using the flex-wrap property:

CSS:
.container {
  display: flex;
  flex-wrap: wrap;
}
.container > div {
  background-color: orange;
  padding: 30px 90px;
  margin: 5px;
}
